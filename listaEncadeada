#include <stdio.h>
#include <stdlib.h>

#define QUANTIDADE_DE_PROCESSOS 6

struct cel {
	int tempo_de_chegada;
	int tempo_necessario;
	int tempo_restante;
	struct cel *prox;
};

typedef struct cel celula;
void insere_inicio(celula **L, int chegada,int necessario, int restante);
void insere_final(celula **lista, int chegada,int necessario, int restante);
void imprime_lista(celula *lista);
void rr(celula *lista, int quantun);
int remove_inicio(celula** f);

int main(int argc, char const *argv[])
{
	celula *lista;
	lista = NULL;

	int tempo_de_chegada[QUANTIDADE_DE_PROCESSOS] = {5, 4, 3, 2, 1, 0};
	int tempo_necessario[QUANTIDADE_DE_PROCESSOS] = {1, 10, 20, 30, 40, 50};
	int tempo_restante[QUANTIDADE_DE_PROCESSOS] = {1, 10, 20, 30, 40, 50};
	
	
	for(int i=0;i<QUANTIDADE_DE_PROCESSOS;i++){
		insere_inicio(&lista, tempo_de_chegada[i],tempo_necessario[i],tempo_restante[i]); //insere elemento na fila
	}

	imprime_lista(lista);	
	
	remove_inicio(&lista);
	imprimi_primeiro(lista,3);
	imprime_lista(lista);

	insere_final(&lista, 6,2,3); //insere elemento na fila

	imprime_lista(lista);

	return 0;
}

void imprime_lista(celula *lista){
	celula *p;
	printf("tempo de chegada - tempo necessario - tempo restante\n");
	for (p = lista; p != NULL; p = p->prox)		
		printf("%d                   %d                 %d\n", p->tempo_de_chegada, p->tempo_necessario,p->tempo_restante);	
}

void rr(celula *lista, int quantun){
	celula *p;
	
	printf("%d\n", p->tempo_de_chegada);
}

void insere_inicio(celula **L, int chegada,int necessario, int restante){
	celula *novo;
	
	novo = (celula*) malloc(sizeof(celula));

	if (novo != NULL) {
			novo->tempo_de_chegada = chegada;
			novo->tempo_necessario = necessario;
			novo->tempo_restante = restante;
			novo->prox = *L;
			*L = novo;
	}
	else {
		printf("Não há memória disponível!\n");
		exit(EXIT_FAILURE);
	}
}

void insere_final(celula **lista, int chegada,int necessario, int restante){
	celula *novo, *aux;

	novo = (celula*) malloc(sizeof(celula));

	novo->tempo_de_chegada = chegada;
	novo->tempo_necessario = necessario;
	novo->tempo_restante = restante;
	
	novo->prox =  NULL;  // Ultimo elemento da lista
	if (*lista == NULL) 
		*lista = novo;
	else {
		aux = *lista;
		while (aux->prox != NULL)
			aux = aux->prox;
		aux->prox = novo;
	}
}

int remove_inicio(celula** lista)
{ 	
	celula* n;
	int v;
	if(*lista == NULL)
		return -1;
	n = *lista;
	*lista = n->prox;
	v = n->tempo_de_chegada;

	free(n);
	return v;
}
